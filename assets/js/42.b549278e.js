(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{587:function(e,v,t){"use strict";t.r(v);var V=t(7),o=Object(V.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[e._v("  Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。")])]),e._v(" "),t("h2",{attrs:{id:"一、vue定义及简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、vue定义及简介"}},[e._v("#")]),e._v(" 一、Vue定义及简介")]),e._v(" "),t("h3",{attrs:{id:"_1、vue定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、vue定义"}},[e._v("#")]),e._v(" 1、Vue定义")]),e._v(" "),t("p",[e._v("  关于Vue简介，百度百科给出的解释是：Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。")]),e._v(" "),t("p",[e._v("  Vue.js 是一个提供了 MVVM 风格双向数据绑定的 Javascript 库（无依赖别的js库，直接引入一个js文件就可以使用，跟jquery差不多），专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。")]),e._v(" "),t("h3",{attrs:{id:"_2、vue背景简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、vue背景简介"}},[e._v("#")]),e._v(" 2、Vue背景简介")]),e._v(" "),t("h4",{attrs:{id:"_2-1、vue诞生的背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、vue诞生的背景"}},[e._v("#")]),e._v(" 2.1、Vue诞生的背景")]),e._v(" "),t("p",[e._v("  从历史的潮流来说，人们从之前的:原生JS -> Jquery之类的类库 -> 前端模板引擎 ,他们都有一个共同的特点需要我们去操作dom元素。近几年来，得益于手机设备的普及和性能的提升，移动端的web需求大量增加，产生了一种叫webapp的东西，也就是移动端的网页应用。为了更好满足当前移动webapp项目的开发需求，MVVM框架诞生，而Vue便是这样的一种框架。那么什么是Vue?")]),e._v(" "),t("p",[e._v("  官网有一句对它的介绍：通过尽可能简单的API实现响应的数据绑定和组合的视图组件。Vue的核心主要包括下面两块：")]),e._v(" "),t("p",[e._v("  Vue的数据驱动：数据改变驱动了视图的自动更新，传统的做法你得手动改变DOM来改变视图，vuejs只需要改变数据，就会自动改变视图；")]),e._v(" "),t("p",[e._v("  视图组件化：把整一个网页的拆分成一个个区块，每个区块我们可以看作成一个组件。网页由多个组件拼接或者嵌套组成（可维护、可重用）。")]),e._v(" "),t("h4",{attrs:{id:"_2-2、mvvm框架的发展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、mvvm框架的发展"}},[e._v("#")]),e._v(" 2.2、MVVM框架的发展")]),e._v(" "),t("p",[e._v("  MVC（View Model Controller ）模式：")]),e._v(" "),t("p",[e._v("  MVC框架最早出现在Java领域，在经典的MVC模式中，是用户通过Controller来操作Model以达到View的变化。MVC 即 Model-View-Controller 的缩写，就是 模型—视图—控制器，也就是说一个标准的Web 应用程式是由这三部分组成的：")]),e._v(" "),t("p",[e._v("    View ：用来把数据以某种方式呈现给用户；")]),e._v(" "),t("p",[e._v("  Model ：其实就是数据；")]),e._v(" "),t("p",[e._v("  Controller ：接收并处理来自用户的请求，并将 Model 返回给用户；")]),e._v(" "),t("p",[e._v("  MVP(Model View Presenter)模式：")]),e._v(" "),t("p",[e._v("  而后的MVP模式（MVC模式的演变）逻辑层在Presenter里实现，而且Presenter与具体的View 是没有直接关联的，而是通过定好的接口进行交互（在MVC中View会直接从Model中读取数据而不是通过 Controller）。 View 与 Model 不发生联系，都通过 Presenter 传递。")]),e._v(" "),t("p",[e._v("  在HTML5 还未火起来的那些年，MVC 作为Web 应用的最佳实践是很OK 的，这是因为 Web 应用的View 层相对来说比较简单，前端所需要的数据在后端基本上都可以处理好，View 层主要是做一下展示，那时候提倡的是 Controller 来处理复杂的业务逻辑，所以View 层相对来说比较轻量，就是所谓的瘦客户端思想。")]),e._v(" "),t("p",[e._v("  相对 HTML4，HTML5 最大的亮点是它为移动设备提供了一些非常有用的功能，使得 HTML5 具备了开发App的能力， HTML5开发App 最大的好处就是跨平台、快速迭代和上线，节省人力成本和提高效率，因此很多企业开始对传统的App进行改造，逐渐用H5代替Native，到2015年的时候，市面上大多数App 或多或少嵌入都了H5 的页面。既然要用H5 来构建 App， 那View 层所做的事，就不仅仅是简单的数据展示了，它不仅要管理复杂的数据状态，还要处理移动设备上各种操作行为等等。因此，前端也需要工程化，也需要一个类似于MVC 的框架来管理这些复杂的逻辑，使开发更加高效。")]),e._v(" "),t("p",[e._v("  注：Native（使用原生制作APP，即在基于目前的智能手机的操作系统(如安卓android、苹果IOS，另外还有 (windows phone) 的基础上，使用相应平台支持的开发工具和语言 ( 比如 iOS 平台支持 Xcode 和 Objective-C，安平台支持 Eclipse 和 Java) 编写的第三方移动应用程序，简称原生APP。）")]),e._v(" "),t("p",[e._v("  但实际上，随着H5 的不断发展，人们更希望使用H5 开发的应用能和Native 媲美，或者接近于原生App 的体验效果：")]),e._v(" "),t("p",[e._v("  1）开发者在代码中大量调用相同的 DOM API，处理繁琐 ，操作冗余，使得代码难以维护。")]),e._v(" "),t("p",[e._v("  2）大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。")]),e._v(" "),t("p",[e._v("  3）当 Model 频繁发生变化，开发者需要主动更新到View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。")]),e._v(" "),t("p",[e._v("  MVVM（Model View ViewModel） 模式：")]),e._v(" "),t("p",[e._v("  其实，早期jquery 的出现就是为了前端能更简洁的操作DOM 而设计的，但它只解决了第一个问题，另外两个问题始终伴随着前端一直存在。MVVM 的出现，完美解决了以上三个问题。MVVM 由 Model、View、ViewModel 三部分构成，Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，ViewModel 是一个同步View 和 Model的对象。")]),e._v(" "),t("p",[e._v("  在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理（用到这种的有来自Google的AngularJS，还有Vue.js、Knockout、Ember.js）。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/xiaoxianer321/article/details/111560355",target:"_blank",rel:"noopener noreferrer"}},[e._v("我的博客原文地址"),t("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=o.exports}}]);